#This program will interface with both the keyboard and the LCD display to
#allow the user to type on the LCD screen

#####MAIN PROGRAM BEGIN#####

opin0 15 #Select the LEDs as output, "01" and turn on the run light
opin1 14
noop
noop
noop
addi r1, r0, 1
oprt r1
opin0 14 #Back to default of "00" for the LCD data bus

opin0 13 #Set input port to "00" for the keyboard scan code
opin0 12

opin0 10 #Set the R/W pin to 0 forever

#Call the LCD startup sequence subroutine
addi r31, r0, CONT1
jp SR_LCD_STARTUP
noop
noop
noop
lbl CONT1

lbl MAIN_LOOP
    
     #Call the keyboard subroutine
     addi r31, r0, CONT2
     jp SR_KEYBOARD_HANDLE
     noop
     noop
     noop
     lbl CONT2
     
     #Checks to see if the ASCII code is something to display, or for control
     lbl CHECK_CODE
#         cpi r30, 13
#         brne ENTER
#         cpi r30, 27
#         brne ESC
         cpi r30, 8
         brne BKSP
#         cpi r30, 17
#         brne ARROWR
#         cpi r30, 18
#         brne ARROWL
#         cpi r30, 19
#         brne ARROWU
#         cpi r30, 20
#         brne ARROWD
         noop
         noop
         noop
         jp SEND_LETTER
         noop
         noop
         noop
         
     lbl BKSP
          opin0 9 #RS to 0
          opin1 8 #E to 1
          addi r1, r0, 16 #Shift cursor left
     	oprt r1
     	opin0 8 #E to 0
     	
     	addi r7, r0, 0 #Reset r7, which will be used for counting cycles
	     addi r8, r0, 75
          lbl WAIT_37US
     		addi r7, r7, 1
     		cp r7, r8
     		brnl WAIT_37US
     		noop
     		noop
     		noop
     	
     	opin1 9 #RS to 1
     	opin1 8 #E to 1
     	addi r1, r0, 32
     	oprt r1
     	opin0 8 #E to 0
     	opin0 9 #RS to 0
     	
     	addi r7, r0, 0 #Reset r7, which will be used for counting cycles
	     addi r8, r0, 75
          lbl WAIT_37US0
     		addi r7, r7, 1
     		cp r7, r8
     		brnl WAIT_37US0
     		noop
     		noop
     		noop
     		
    		opin0 9 #RS to 0
          opin1 8 #E to 1
          addi r1, r0, 16 #Shift cursor left
     	oprt r1
     	opin0 8 #E to 0
     	
          jp MAIN_LOOP
     	noop
     	noop
     	noop

     #Sends the letter to the LCD display
     lbl SEND_LETTER
     	opin1 9 #RS to 1
     	opin1 8 #E to 1
     	oprt r30 #Send the letter
     	opin0 8 #E to 0
     	opin0 9 #RS to 0
     	jp MAIN_LOOP
     	noop
     	noop
     	noop

#####MAIN PROGRAM END#####

#####SUBROUTINE DEFINITIONS#####

#This subroutine goes through the startup sequence for the
#LCD screen.
#Registers used: 29, 30
#Both erased before and after use
lbl SR_LCD_STARTUP
	lbl SET_FUNCTION
		opin0 9 #RS pin to 0
		opin1 8 #E pin to 1
		addi r29, r0, 56 #Send the set function, 00111000
		oprt r29
		opin0 8 #E pin back to 0
		
	addi r29, r0, 0 #Reset r29, which will be used for counting cycles
	addi r30, r0, 75
	lbl WAIT_37US1
		addi r29, r29, 1
		cp r29, r30
		brnl WAIT_37US1
		noop
		noop
		noop
	
	lbl DISPLAY_SET
		opin0 9 #RS pin to 0
		opin1 8 #E pin to 1
		addi r29, r0, 15 #Send the display set function, 00001111
		oprt r29
		opin0 8 #E pin back to 0
	
	addi r29, r0, 0 #Reset r29, which will be used for counting cycles
	addi r30, r0, 75
	lbl WAIT_37US2
		addi r29, r29, 1
		cp r29, r30
		brnl WAIT_37US2
		noop
		noop
		noop

	lbl DISPLAY_CLEAR
		opin0 9 #RS pin to 0
		opin1 8 #E pin to 1
		addi r29, r0, 1 #Send the display clear function, 00000001
		oprt r29
		opin0 8 #E pin back to 0

	addi r29, r0, 0 #Reset r29
	addi r30, r0, 2500
	lbl WAIT_1.52MS
		addi r29, r29, 1 #Increment r29
		cp r29, r30
		brnl WAIT_1.52MS
		noop
		noop
		noop

	addi r29, r0, 0
	addi r30, r0, 0
	
	jp r31, 0
	noop
	noop
	noop
#End SR_LCD_STARTUP subroutine

#The keyboard handler subroutine, gets scancodes and outputs ASCII codes.
#Interfaces with the keyboard interface module.
#Registers used: 28, 29, 30
#Output placed in 30, 29 erased before and after use.
lbl SR_KEYBOARD_HANDLE
	lbl GET_SCAN_CODE
		ipchk 15 #Check to see if a scan code is ready
		brnp READY
		noop
		noop
		noop
		jp GET_SCAN_CODE
		noop
		noop
		noop
		lbl READY
               opin0 13 #Make sure the keyboard handler port is selected, "00"
               opin0 12
			iprt r30
			opin1 11 #Toggle acknowledge
			opin0 11

	#The reason I'm doing branches without noops to buffer them
	#is that if a branch gets taken, it doesn't matter if another
	#branch gets put in the works because it has to be false if
	#the one before it was true.
	lbl TO_ASCII
		#These values get checked regardless of shift value
		cpi r30, 89
		brne KEY_SHIFT #Right
		cpi r30, 18
		brne KEY_SHIFT #Left
		#Release catch after checking for shifts
		cpi r29, 1
		brne RELEASE_CODE
		noop
		noop
		noop
		cpi r30, 90
		brne KEY_ENTER
		cpi r30, 118
		brne KEY_ESC
		cpi r30, 102
		brne KEY_BKSP
		cpi r30, 115
		brne KEY_ARROWR
		cpi r30, 107
		brne KEY_ARROWL
		cpi r30, 116
		brne KEY_ARROWU
		cpi r30, 113
		brne KEY_ARROWD
		cpi r30, 41
		brne KEY_SPACE
		cpi r30, 240
		brne KEY_RELEASE
		
		#Check for shifted
		cpi r28, 1
		brne SHIFTED
		noop
		noop
		noop
		
		#All of these values are for when a shift key isn't pressed
		lbl UNSHIFTED
		     #Numbers
     		cpi r30, 22
     		brne KEY_1
     		cpi r30, 30
     		brne KEY_2
     		cpi r30, 38
     		brne KEY_3
     		cpi r30, 37
     		brne KEY_4
     		cpi r30, 46	
     		brne KEY_5
     		cpi r30, 54
     		brne KEY_6
     		cpi r30, 61
     		brne KEY_7
     		cpi r30, 62
     		brne KEY_8
     		cpi r30, 70
     		brne KEY_9
     		cpi r30, 69
     		brne KEY_0
     		#Letters
     		cpi r30, 28
     		brne KEY_a
     		cpi r30, 50
     		brne KEY_b
     		cpi r30, 33
     		brne KEY_c
     		cpi r30, 35
     		brne KEY_d
     		cpi r30, 36
     		brne KEY_e
     		cpi r30, 43
     		brne KEY_f
     		cpi r30, 52
     		brne KEY_g
     		cpi r30, 51
     		brne KEY_h
     		cpi r30, 67
     		brne KEY_i
     		cpi r30, 59
     		brne KEY_j
     		cpi r30, 66
     		brne KEY_k
     		cpi r30, 75
     		brne KEY_l
     		cpi r30, 58
     		brne KEY_m
     		cpi r30, 49
     		brne KEY_n
     		cpi r30, 68
     		brne KEY_o
     		cpi r30, 77
     		brne KEY_p
     		cpi r30, 21
     		brne KEY_q
     		cpi r30, 45
     		brne KEY_r
     		cpi r30, 27
     		brne KEY_s
     		cpi r30, 44
     		brne KEY_t
     		cpi r30, 60
     		brne KEY_u
     		cpi r30, 42
     		brne KEY_v
     		cpi r30, 29
     		brne KEY_w
     		cpi r30, 34
     		brne KEY_x
     		cpi r30, 53
     		brne KEY_y
     		cpi r30, 26
     		brne KEY_z
     		#Symbols
     		cpi r30, 78
     		brne KEY_-
     		cpi r30, 85
     		brne KEY_=
     		cpi r30, 84
     		brne KEY_[
     		cpi r30, 91
     		brne KEY_]
     		cpi r30, 93
     		brne KEY_\
     		cpi r30, 76
     		brne KEY_;
     		cpi r30, 82
     		brne KEY_'
     		cpi r30, 65
     		brne KEY_,
     		cpi r30, 73
     		brne KEY_.
     		cpi r30, 74
     		brne KEY_/
     		
		#All of these codes are for when a shift key is down
		lbl SHIFTED
		     #Numbers
     		cpi r30, 22
     		brne KEY_!
     		cpi r30, 30
     		brne KEY_@
     		cpi r30, 38
     		brne KEY_#
     		cpi r30, 37
     		brne KEY_$
     		cpi r30, 46	
     		brne KEY_%
     		cpi r30, 54
     		brne KEY_^
     		cpi r30, 61
     		brne KEY_&
     		cpi r30, 62
     		brne KEY_*
     		cpi r30, 70
     		brne KEY_(
     		cpi r30, 69
     		brne KEY_)
     		#Letters
     		cpi r30, 28
     		brne KEY_A
     		cpi r30, 50
     		brne KEY_B
     		cpi r30, 33
     		brne KEY_C
     		cpi r30, 35
     		brne KEY_D
     		cpi r30, 36
     		brne KEY_E
     		cpi r30, 43
     		brne KEY_F
     		cpi r30, 52
     		brne KEY_G
     		cpi r30, 51
     		brne KEY_H
     		cpi r30, 67
     		brne KEY_I
     		cpi r30, 59
     		brne KEY_J
     		cpi r30, 66
     		brne KEY_K
     		cpi r30, 75
     		brne KEY_L
     		cpi r30, 58
     		brne KEY_M
     		cpi r30, 49
     		brne KEY_N
     		cpi r30, 68
     		brne KEY_O
     		cpi r30, 77
     		brne KEY_P
     		cpi r30, 21
     		brne KEY_Q
     		cpi r30, 45
     		brne KEY_R
     		cpi r30, 27
     		brne KEY_S
     		cpi r30, 44
     		brne KEY_T
     		cpi r30, 60
     		brne KEY_U
     		cpi r30, 42
     		brne KEY_V
     		cpi r30, 29
     		brne KEY_W
     		cpi r30, 34
     		brne KEY_X
     		cpi r30, 53
     		brne KEY_Y
     		cpi r30, 26
     		brne KEY_Z
		     #Symbols
     		cpi r30, 78
     		brne KEY__
     		cpi r30, 85
     		brne KEY_+
     		cpi r30, 84
     		brne KEY_{
     		cpi r30, 91
     		brne KEY_}
     		cpi r30, 93
     		brne KEY_|
     		cpi r30, 76
     		brne KEY_:
     		cpi r30, 82
     		brne KEY_"
     		cpi r30, 65
     		brne KEY_<
     		cpi r30, 73
     		brne KEY_>
     		cpi r30, 74
     		brne KEY_?
		     noop
		     noop
		     noop
		
		jp GET_SCAN_CODE
		noop
		noop
		noop

	lbl KEY_RELEASE #If the release code was sent
		addi r29, r0, 1
		jp GET_SCAN_CODE
		noop
		noop
		noop

	lbl RELEASE_CODE #Catching the code after the release code
		addi r29, r0, 0
		jp GET_SCAN_CODE
		noop
		noop
		noop

	#All of the labels for setting r1 to the ASCII codes... how inefficient
	
	#Other Keys
	lbl KEY_SHIFT
	    cpi r29, 1
	    brne SHIFT_RELEASE
	    noop
	    noop
	    noop
	    #If shift was pressed, not released
	    addi r28, r0 1
	    jp GET_SCAN_CODE
	    noop
	    noop
	    noop
	    lbl SHIFT_RELEASE
	        #If shift was released
	        addi r29, r0, 0 #Reset the release code catch flag
	        addi r28, r0, 0 #Reset the shift flag
	        jp GET_SCAN_CODE
	        noop
	        noop
	        noop
	        
     lbl KEY_ENTER
          addi r30, r0, 13
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_ESC
          addi r30, r0, 27
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_BKSP
          addi r30, r0, 8
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_ARROWR
          addi r30, r0, 17
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_ARROWL
          addi r30, r0, 18
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_ARROWU
          addi r30, r0, 19
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_ARROWD
          addi r30, r0, 20
     	jp r31, 0
     	noop
     	noop
     	
     lbl KEY_SPACE
     	addi r30, r0, 32
     	jp r31, 0
     	noop
     	noop
     	noop
 
     #ASCII code setting for unshifted values
     #Numbers
	lbl KEY_1
		addi r30, r0, 49
		jp r31, 0
		noop
		noop
		noop

     lbl KEY_2
     	addi r30, r0, 50
     	jp r31, 0
     	noop
     	noop
     	noop

     lbl KEY_3
     	addi r30, r0, 51
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_4
     	addi r30, r0, 52
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_5
     	addi r30, r0, 53
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_6
     	addi r30, r0, 54
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_7
     	addi r30, r0, 55
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_8
     	addi r30, r0, 56
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_9
     	addi r30, r0, 57
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_0
     	addi r30, r0, 48
     	jp r31, 0
     	noop
     	noop
     	noop
    	
    	#Letters
    	lbl KEY_a
          addi r30, r0, 97
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_b
          addi r30, r0, 98
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_c
    	     addi r30, r0, 99
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_d
    	     addi r30, r0, 100
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_e
    	     addi r30, r0, 101
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_f
    	     addi r30, r0, 102
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_g
    	     addi r30, r0, 103
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_h
    	     addi r30, r0, 104
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_i
    	     addi r30, r0, 105
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_j
    	     addi r30, r0, 106
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_k
    	     addi r30, r0, 107
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_l
    	     addi r30, r0, 108
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_m
    	     addi r30, r0, 109
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_n
    	     addi r30, r0, 110
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_o
    	     addi r30, r0, 111
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_p
    	     addi r30, r0, 112
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_q
    	     addi r30, r0, 113
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_r
    	     addi r30, r0, 114
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_s
    	     addi r30, r0, 115
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_t
    	     addi r30, r0, 116
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_u
    	     addi r30, r0, 117
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_v
    	     addi r30, r0, 118
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_w
    	     addi r30, r0, 119
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_x
    	     addi r30, r0, 120
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_y
    	     addi r30, r0, 121
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_z
    	     addi r30, r0, 122
     	jp r31, 0
     	noop
     	noop
     	noop
    	
    	#Symbols
    	lbl KEY_-
    	     addi r30, r0, 45
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_=
    	     addi r30, r0, 61
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_[
    	     addi r30, r0, 91
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_]
    	     addi r30, r0, 93
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_\
    	     addi r30, r0, 92
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_;
    	     addi r30, r0, 59
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_'
    	     addi r30, r0, 96
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_,
    	     addi r30, r0, 44
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_.
    	     addi r30, r0, 46
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	lbl KEY_/
    	     addi r30, r0, 47
     	jp r31, 0
     	noop
     	noop
     	noop
     	
     	
    	#For shifted values
     #Numbers/symbols
     lbl KEY_!
         addi r30, r0, 33
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_@
         addi r30, r0, 64
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_#
         addi r30, r0, 35
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_$
         addi r30, r0, 36
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_%
         addi r30, r0, 37
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_^
         addi r30, r0, 94
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_&
         addi r30, r0, 38
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_*
         addi r30, r0, 42
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_(
         addi r30, r0, 40
         jp r31, 0
         noop
         noop
         noop
         
     lbl KEY_)
         addi r30, r0, 41
         jp r31, 0
         noop
         noop
         noop
         
     #Letters     
     lbl KEY_A
     	addi r30, r0, 65
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_B
     	addi r30, r0, 66
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_C
     	addi r30, r0, 67
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_D
     	addi r30, r0, 68
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_E
     	addi r30, r0, 69
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_F
     	addi r30, r0, 70
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_G
     	addi r30, r0, 71
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_H
     	addi r30, r0, 72
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_I
     	addi r30, r0, 73
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_J
     	addi r30, r0, 74
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_K
     	addi r30, r0, 75
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_L
     	addi r30, r0, 76
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_M
     	addi r30, r0, 77
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_N
     	addi r30, r0, 78
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_O
     	addi r30, r0, 79
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_P
     	addi r30, r0, 80
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_Q
     	addi r30, r0, 81
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_R
     	addi r30, r0, 82
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_S
     	addi r30, r0, 83
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_T
     	addi r30, r0, 84
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_U
     	addi r30, r0, 85
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_V
     	addi r30, r0, 86
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_W
     	addi r30, r0, 87
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_X
     	addi r30, r0, 88
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_Y
     	addi r30, r0, 89
     	jp r31, 0
     	noop
     	noop
     	noop
     
     lbl KEY_Z
     	addi r30, r0, 90
     	jp r31, 0
     	noop
     	noop
     	noop
     	
    	#Symbols
    	lbl KEY__
    	    addi r30, r0, 95
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_+
    	    addi r30, r0, 43
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_{
    	    addi r30, r0, 123
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_}
    	    addi r30, r0, 125
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_|
    	    addi r30, r0, 124
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_:
    	    addi r30, r0, 58
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_"
    	    addi r30, r0, 34
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_<
    	    addi r30, r0, 60
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_>
    	    addi r30, r0, 62
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
     lbl KEY_?
    	    addi r30, r0, 63
    	    jp r31, 0
    	    noop
    	    noop
    	    noop
    	    
#End SR_KEYBOARD_HANDLE subroutine
%
